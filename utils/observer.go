package utils

import (
	erutan "github.com/The-Tensox/erutan/protobuf"
	"sync"
)

type (
	// Observable brings a global event dispatcher: Observer design pattern
	Observable interface {
		Register(observer Observer)
		Deregister(event Event)
		NotifyAll(event Event)
	}

	// Observer will listen to some events
	Observer interface {
		Handle(event Event)
	}

	// Watch implements Observable
	Watch struct {
		broadcast chan Event
		observers sync.Map
	}

	EventID int

	Event struct {
		Value interface{}
	}

	ClientSettingsUpdated struct {
		ClientToken string
		Settings    erutan.Packet_UpdateParameters
	}
	OnClientConnected struct {
		ClientToken string
		Settings    erutan.Packet_UpdateParameters
	}
)

func NewWatch() *Watch {
	return &Watch{broadcast: make(chan Event, 10000)}
}

func (w *Watch) Listen() {
	for {
		if v, ok := <-w.broadcast; ok {
			w.observers.Range(func(key, value interface{}) bool {
				value.(chan Event) <- v
				return true
			})
		}
	}
}

// ????????????????????????????????????????????????????????????????????????????????????????????????????????
// ????????????????????????????????????????????????????????????????????????????????????????????????????????
// ????????????????????????????????????????????????????????????????????????????????????????????????????????
// ????????????????????????????????????????????????????????????????????????????????????????????????????????
// ????????????????????????????????????????????????????????????????????????????????????????????????????????
func (w *Watch) callbackOnNotification(observer Observer) {
	c, _ := w.observers.Load(observer)
	events := c.(chan Event)
	for {
		if event, ok := <-events; ok {
			observer.Handle(event)
		}
	}
}

func (w *Watch) Register(observer Observer) {
	w.observers.Store(observer, make(chan Event, 10000))
	go w.callbackOnNotification(observer)
}

func (w *Watch) Deregister(observer Observer) {
	c, _ := w.observers.Load(observer)
	close(c.(chan Event))
	w.observers.Delete(observer)
}

func (w *Watch) NotifyAll(event Event) {
	// Push the event into every registered channels
	w.broadcast <- event
}
