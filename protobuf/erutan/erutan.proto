syntax = "proto3";

package erutan;

import "google/protobuf/timestamp.proto";
import "protobuf/protometry/vector3.proto";
import "protobuf/protometry/quaternion.proto";
import "protobuf/protometry/volume.proto";
option go_package = "internal/erutan;erutan";
option csharp_namespace = "Erutan";

/*
    The Erutan service.
*/
service Erutan {
    rpc Stream(stream Packet) returns (stream Packet) {}
}

message Metadata {
    google.protobuf.Timestamp timestamp = 1;
}

// Data-oriented design : Object (=Object here) Component System (ECS)
message Component {
    oneof type {
        SpaceComponent space = 1;
        HealthComponent health = 2;
        SpeedComponent speed = 3;
        RenderComponent render = 4;
        BehaviourTypeComponent behaviour_type = 5;
        PhysicsComponent physics = 6;
        NetworkBehaviourComponent network_behaviour = 7;
    }
    message SpaceComponent {
        protometry.Vector3 position = 1;
        protometry.Quaternion rotation = 2;
        protometry.Vector3 scale = 3;
    }
    message HealthComponent {
        double life = 1;
    }
    message SpeedComponent {
        double move_speed = 1;
    }
    message TargetComponent {
        protometry.Vector3 target = 1;
    }
    message RenderComponent {
        protometry.Mesh mesh = 1;
        repeated  Color colors = 2;
        message Color {
            float red = 1;
            float green = 2;
            float blue = 3;
            float alpha = 4;
        }
    }
    // Acts as a sort of tag
    message BehaviourTypeComponent {
        Tag tag = 1;
        enum Tag {
            ANY = 0;
            ANIMAL = 1;
            VEGETATION = 2;
            PLAYER = 3;
        }
    }
    // Control of an object's position through physics simulation
    message PhysicsComponent {
        // Controls whether gravity affects this object
        bool use_gravity = 1;
        // We probably don't want to reimplement a physics engine
//        // Controls whether physics affects the object
//        bool is_kinematic = 2;
//        // The mass of the object
//        double mass = 3;
//        // The  velocity vector of the object. It represents the rate of change of object position
//        protometry.Vector3 velocity = 4;
//        // The drag of the object.
//        // Drag can be used to slow down an object. The higher the drag the more the object slows down
//        double drag = 5;
//        // The angular velocity vector of the object measured in radians per second
//        protometry.Vector3 angular_velocity = 6;
//        // The angular drag of the object.
//        // Angular drag can be used to slow down the rotation of an object
//        double angular_drag = 7;
    }
    // Some information about how this object should be synchronized
    message NetworkBehaviourComponent {
        Tag tag = 1;
        string owner_token = 2; // Useful to define who [is allowed] to control x object ...
        enum Tag { // Some kind of filter, should an object be considered debug thing or normal or hack mode: show only clients :p
            ALL = 0;
            DEBUG = 1;
        }
    }
}

message Packet {
    Metadata metadata = 1;
    oneof type {
        // General physical objects
        UpdateObjectPacket update_object = 2;
        UpdatePositionPacket update_position = 3;
        UpdateRotationPacket update_rotation = 4;
        DestroyObjectPacket destroy_object = 5;

        // Server general
        UpdateParametersPacket update_parameters = 6;
        ArmageddonPacket armageddon = 7;
        AuthenticationPacket authentication = 8;

        // Player
        CreatePlayerPacket create_player = 9;
        UpdateSpaceRequestPacket update_space_request = 10;
    }

    message UpdateObjectPacket {
        uint64 object_id = 1;
        repeated Component components = 2;
    }

    message UpdatePositionPacket {
        uint64 object_id = 1;
        protometry.Vector3 position = 2;
    }

    message UpdateRotationPacket {
        uint64 object_id = 1;
        protometry.Quaternion rotation = 2;
    }

    message DestroyObjectPacket {
        uint64 object_id = 1;
        protometry.Box region = 2; // It's faster to search by region
    }

    message UpdateParametersPacket {
        repeated Parameter parameters = 1;
        message Parameter {
            oneof type {
                double time_scale = 1;
                bool debug = 2; // Whether or not synchronizing debug stuff
                protometry.Box culling_area = 3;
            }
        }
    }

    message ArmageddonPacket {
    }

    message AuthenticationPacket {
        string client_token = 1;
    }

    message CreatePlayerPacket {
        uint64 object_id = 1;
        repeated Component components = 2;
    }

    // Client request a space update of an object, server check physics etc.
    message UpdateSpaceRequestPacket {
        uint64 object_id = 1;
        Component.SpaceComponent actualSpace = 2;
        Component.SpaceComponent newSpace = 3;
    }
}
